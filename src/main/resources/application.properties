spring.application.name=DemoSpringBootSecurity

#spring.mvc.view.prefix=/views/
#spring.mvc.view.suffix=.jsp

spring.thymeleaf.prefix=/views/
spring.thymeleaf.suffix=.jsp

spring.datasource.url=jdbc:postgresql://localhost:5432/sandesh
spring.datasource.username=postgres
spring.datasource.password=Sandesh@03
spring.datasource.driver-class-name=org.postgresql.Driver

## Google OAuth2 Configuration
#
## Client ID obtained from the OAuth2 provider (Google in this case)
#spring.security.oauth2.client.registration.google.client-id=your-client-id
## Client Secret obtained from the OAuth2 provider (Google in this case)
#spring.security.oauth2.client.registration.google.client-secret=your-client-secret
## Access token URI to obtain the access token from Google
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
## User authorization URI to authenticate the user through Google
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
## Token name parameter used by the OAuth2 provider (not always needed for standard providers)
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
## Authentication scheme, typically "Bearer" for OAuth2
#spring.security.oauth2.client.provider.google.token-info-uri=https://www.googleapis.com/oauth2/v1/tokeninfo
## Client authentication scheme (basic, post) for Google
#spring.security.oauth2.client.registration.google.client-authentication-method=post
## Scopes required by the application (e.g., profile, email)
#spring.security.oauth2.client.registration.google.scope=openid, profile, email
## User information URI to fetch the user details from Google
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
## Preferred token info endpoint (additional parameter if needed)
#spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
